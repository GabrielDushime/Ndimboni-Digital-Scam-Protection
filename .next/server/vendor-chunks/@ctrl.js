"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ctrl";
exports.ids = ["vendor-chunks/@ctrl"];
exports.modules = {

/***/ "./node_modules/@ctrl/tinycolor/dist/conversion.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/conversion.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.numberInputToObject = exports.parseIntFromHex = exports.convertHexToDecimal = exports.convertDecimalToHex = exports.rgbaToArgbHex = exports.rgbaToHex = exports.rgbToHex = exports.hsvToRgb = exports.rgbToHsv = exports.hslToRgb = exports.rgbToHsl = exports.rgbToRgb = void 0;\nvar util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/@ctrl/tinycolor/dist/util.js\");\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */ function rgbToRgb(r, g, b) {\n    return {\n        r: (0, util_js_1.bound01)(r, 255) * 255,\n        g: (0, util_js_1.bound01)(g, 255) * 255,\n        b: (0, util_js_1.bound01)(b, 255) * 255\n    };\n}\nexports.rgbToRgb = rgbToRgb;\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */ function rgbToHsl(r, g, b) {\n    r = (0, util_js_1.bound01)(r, 255);\n    g = (0, util_js_1.bound01)(g, 255);\n    b = (0, util_js_1.bound01)(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return {\n        h: h,\n        s: s,\n        l: l\n    };\n}\nexports.rgbToHsl = rgbToHsl;\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */ function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = (0, util_js_1.bound01)(h, 360);\n    s = (0, util_js_1.bound01)(s, 100);\n    l = (0, util_js_1.bound01)(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n        r: r * 255,\n        g: g * 255,\n        b: b * 255\n    };\n}\nexports.hslToRgb = hslToRgb;\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */ function rgbToHsv(r, g, b) {\n    r = (0, util_js_1.bound01)(r, 255);\n    g = (0, util_js_1.bound01)(g, 255);\n    b = (0, util_js_1.bound01)(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    } else {\n        switch(max){\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return {\n        h: h,\n        s: s,\n        v: v\n    };\n}\nexports.rgbToHsv = rgbToHsv;\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */ function hsvToRgb(h, s, v) {\n    h = (0, util_js_1.bound01)(h, 360) * 6;\n    s = (0, util_js_1.bound01)(s, 100);\n    v = (0, util_js_1.bound01)(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [\n        v,\n        q,\n        p,\n        p,\n        t,\n        v\n    ][mod];\n    var g = [\n        t,\n        v,\n        v,\n        q,\n        p,\n        p\n    ][mod];\n    var b = [\n        p,\n        p,\n        t,\n        v,\n        v,\n        q\n    ][mod];\n    return {\n        r: r * 255,\n        g: g * 255,\n        b: b * 255\n    };\n}\nexports.hsvToRgb = hsvToRgb;\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */ function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        (0, util_js_1.pad2)(Math.round(r).toString(16)),\n        (0, util_js_1.pad2)(Math.round(g).toString(16)),\n        (0, util_js_1.pad2)(Math.round(b).toString(16))\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join(\"\");\n}\nexports.rgbToHex = rgbToHex;\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */ // eslint-disable-next-line max-params\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        (0, util_js_1.pad2)(Math.round(r).toString(16)),\n        (0, util_js_1.pad2)(Math.round(g).toString(16)),\n        (0, util_js_1.pad2)(Math.round(b).toString(16)),\n        (0, util_js_1.pad2)(convertDecimalToHex(a))\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join(\"\");\n}\nexports.rgbaToHex = rgbaToHex;\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */ function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        (0, util_js_1.pad2)(convertDecimalToHex(a)),\n        (0, util_js_1.pad2)(Math.round(r).toString(16)),\n        (0, util_js_1.pad2)(Math.round(g).toString(16)),\n        (0, util_js_1.pad2)(Math.round(b).toString(16))\n    ];\n    return hex.join(\"\");\n}\nexports.rgbaToArgbHex = rgbaToArgbHex;\n/** Converts a decimal to a hex value */ function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\nexports.convertDecimalToHex = convertDecimalToHex;\n/** Converts a hex value to a decimal */ function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\nexports.convertHexToDecimal = convertHexToDecimal;\n/** Parse a base-16 hex value into a base-10 integer */ function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexports.parseIntFromHex = parseIntFromHex;\nfunction numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff\n    };\n}\nexports.numberInputToObject = numberInputToObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/conversion.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/css-color-names.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/css-color-names.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.names = void 0;\n// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */ exports.names = {\n    aliceblue: \"#f0f8ff\",\n    antiquewhite: \"#faebd7\",\n    aqua: \"#00ffff\",\n    aquamarine: \"#7fffd4\",\n    azure: \"#f0ffff\",\n    beige: \"#f5f5dc\",\n    bisque: \"#ffe4c4\",\n    black: \"#000000\",\n    blanchedalmond: \"#ffebcd\",\n    blue: \"#0000ff\",\n    blueviolet: \"#8a2be2\",\n    brown: \"#a52a2a\",\n    burlywood: \"#deb887\",\n    cadetblue: \"#5f9ea0\",\n    chartreuse: \"#7fff00\",\n    chocolate: \"#d2691e\",\n    coral: \"#ff7f50\",\n    cornflowerblue: \"#6495ed\",\n    cornsilk: \"#fff8dc\",\n    crimson: \"#dc143c\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgoldenrod: \"#b8860b\",\n    darkgray: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkgrey: \"#a9a9a9\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkseagreen: \"#8fbc8f\",\n    darkslateblue: \"#483d8b\",\n    darkslategray: \"#2f4f4f\",\n    darkslategrey: \"#2f4f4f\",\n    darkturquoise: \"#00ced1\",\n    darkviolet: \"#9400d3\",\n    deeppink: \"#ff1493\",\n    deepskyblue: \"#00bfff\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1e90ff\",\n    firebrick: \"#b22222\",\n    floralwhite: \"#fffaf0\",\n    forestgreen: \"#228b22\",\n    fuchsia: \"#ff00ff\",\n    gainsboro: \"#dcdcdc\",\n    ghostwhite: \"#f8f8ff\",\n    goldenrod: \"#daa520\",\n    gold: \"#ffd700\",\n    gray: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#adff2f\",\n    grey: \"#808080\",\n    honeydew: \"#f0fff0\",\n    hotpink: \"#ff69b4\",\n    indianred: \"#cd5c5c\",\n    indigo: \"#4b0082\",\n    ivory: \"#fffff0\",\n    khaki: \"#f0e68c\",\n    lavenderblush: \"#fff0f5\",\n    lavender: \"#e6e6fa\",\n    lawngreen: \"#7cfc00\",\n    lemonchiffon: \"#fffacd\",\n    lightblue: \"#add8e6\",\n    lightcoral: \"#f08080\",\n    lightcyan: \"#e0ffff\",\n    lightgoldenrodyellow: \"#fafad2\",\n    lightgray: \"#d3d3d3\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lightsalmon: \"#ffa07a\",\n    lightseagreen: \"#20b2aa\",\n    lightskyblue: \"#87cefa\",\n    lightslategray: \"#778899\",\n    lightslategrey: \"#778899\",\n    lightsteelblue: \"#b0c4de\",\n    lightyellow: \"#ffffe0\",\n    lime: \"#00ff00\",\n    limegreen: \"#32cd32\",\n    linen: \"#faf0e6\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66cdaa\",\n    mediumblue: \"#0000cd\",\n    mediumorchid: \"#ba55d3\",\n    mediumpurple: \"#9370db\",\n    mediumseagreen: \"#3cb371\",\n    mediumslateblue: \"#7b68ee\",\n    mediumspringgreen: \"#00fa9a\",\n    mediumturquoise: \"#48d1cc\",\n    mediumvioletred: \"#c71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#f5fffa\",\n    mistyrose: \"#ffe4e1\",\n    moccasin: \"#ffe4b5\",\n    navajowhite: \"#ffdead\",\n    navy: \"#000080\",\n    oldlace: \"#fdf5e6\",\n    olive: \"#808000\",\n    olivedrab: \"#6b8e23\",\n    orange: \"#ffa500\",\n    orangered: \"#ff4500\",\n    orchid: \"#da70d6\",\n    palegoldenrod: \"#eee8aa\",\n    palegreen: \"#98fb98\",\n    paleturquoise: \"#afeeee\",\n    palevioletred: \"#db7093\",\n    papayawhip: \"#ffefd5\",\n    peachpuff: \"#ffdab9\",\n    peru: \"#cd853f\",\n    pink: \"#ffc0cb\",\n    plum: \"#dda0dd\",\n    powderblue: \"#b0e0e6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#663399\",\n    red: \"#ff0000\",\n    rosybrown: \"#bc8f8f\",\n    royalblue: \"#4169e1\",\n    saddlebrown: \"#8b4513\",\n    salmon: \"#fa8072\",\n    sandybrown: \"#f4a460\",\n    seagreen: \"#2e8b57\",\n    seashell: \"#fff5ee\",\n    sienna: \"#a0522d\",\n    silver: \"#c0c0c0\",\n    skyblue: \"#87ceeb\",\n    slateblue: \"#6a5acd\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#fffafa\",\n    springgreen: \"#00ff7f\",\n    steelblue: \"#4682b4\",\n    tan: \"#d2b48c\",\n    teal: \"#008080\",\n    thistle: \"#d8bfd8\",\n    tomato: \"#ff6347\",\n    turquoise: \"#40e0d0\",\n    violet: \"#ee82ee\",\n    wheat: \"#f5deb3\",\n    white: \"#ffffff\",\n    whitesmoke: \"#f5f5f5\",\n    yellow: \"#ffff00\",\n    yellowgreen: \"#9acd32\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/css-color-names.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/format-input.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/format-input.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isValidCSSUnit = exports.stringInputToObject = exports.inputToRGB = void 0;\n/* eslint-disable @typescript-eslint/no-redundant-type-constituents */ var conversion_js_1 = __webpack_require__(/*! ./conversion.js */ \"./node_modules/@ctrl/tinycolor/dist/conversion.js\");\nvar css_color_names_js_1 = __webpack_require__(/*! ./css-color-names.js */ \"./node_modules/@ctrl/tinycolor/dist/css-color-names.js\");\nvar util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/@ctrl/tinycolor/dist/util.js\");\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */ function inputToRGB(color) {\n    var rgb = {\n        r: 0,\n        g: 0,\n        b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === \"string\") {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = (0, conversion_js_1.rgbToRgb)(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = (0, util_js_1.convertToPercentage)(color.s);\n            v = (0, util_js_1.convertToPercentage)(color.v);\n            rgb = (0, conversion_js_1.hsvToRgb)(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = (0, util_js_1.convertToPercentage)(color.s);\n            l = (0, util_js_1.convertToPercentage)(color.l);\n            rgb = (0, conversion_js_1.hslToRgb)(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n        if (Object.prototype.hasOwnProperty.call(color, \"a\")) {\n            a = color.a;\n        }\n    }\n    a = (0, util_js_1.boundAlpha)(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a\n    };\n}\nexports.inputToRGB = inputToRGB;\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */ function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (css_color_names_js_1.names[color]) {\n        color = css_color_names_js_1.names[color];\n        named = true;\n    } else if (color === \"transparent\") {\n        return {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0,\n            format: \"name\"\n        };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return {\n            r: match[1],\n            g: match[2],\n            b: match[3]\n        };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return {\n            r: match[1],\n            g: match[2],\n            b: match[3],\n            a: match[4]\n        };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return {\n            h: match[1],\n            s: match[2],\n            l: match[3]\n        };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return {\n            h: match[1],\n            s: match[2],\n            l: match[3],\n            a: match[4]\n        };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return {\n            h: match[1],\n            s: match[2],\n            v: match[3]\n        };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return {\n            h: match[1],\n            s: match[2],\n            v: match[3],\n            a: match[4]\n        };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: (0, conversion_js_1.parseIntFromHex)(match[1]),\n            g: (0, conversion_js_1.parseIntFromHex)(match[2]),\n            b: (0, conversion_js_1.parseIntFromHex)(match[3]),\n            a: (0, conversion_js_1.convertHexToDecimal)(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: (0, conversion_js_1.parseIntFromHex)(match[1]),\n            g: (0, conversion_js_1.parseIntFromHex)(match[2]),\n            b: (0, conversion_js_1.parseIntFromHex)(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: (0, conversion_js_1.parseIntFromHex)(match[1] + match[1]),\n            g: (0, conversion_js_1.parseIntFromHex)(match[2] + match[2]),\n            b: (0, conversion_js_1.parseIntFromHex)(match[3] + match[3]),\n            a: (0, conversion_js_1.convertHexToDecimal)(match[4] + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: (0, conversion_js_1.parseIntFromHex)(match[1] + match[1]),\n            g: (0, conversion_js_1.parseIntFromHex)(match[2] + match[2]),\n            b: (0, conversion_js_1.parseIntFromHex)(match[3] + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    return false;\n}\nexports.stringInputToObject = stringInputToObject;\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */ function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\nexports.isValidCSSUnit = isValidCSSUnit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvZm9ybWF0LWlucHV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EsMkJBQTJCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDakYsb0VBQW9FLEdBQ3BFLElBQUlLLGtCQUFrQkMsbUJBQU9BLENBQUMsMEVBQWlCO0FBQy9DLElBQUlDLHVCQUF1QkQsbUJBQU9BLENBQUMsb0ZBQXNCO0FBQ3pELElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDLDhEQUFXO0FBQ25DOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELFNBQVNGLFdBQVdLLEtBQUs7SUFDckIsSUFBSUMsTUFBTTtRQUFFQyxHQUFHO1FBQUdDLEdBQUc7UUFBR0MsR0FBRztJQUFFO0lBQzdCLElBQUlDLElBQUk7SUFDUixJQUFJQyxJQUFJO0lBQ1IsSUFBSUMsSUFBSTtJQUNSLElBQUlDLElBQUk7SUFDUixJQUFJQyxLQUFLO0lBQ1QsSUFBSUMsU0FBUztJQUNiLElBQUksT0FBT1YsVUFBVSxVQUFVO1FBQzNCQSxRQUFRTixvQkFBb0JNO0lBQ2hDO0lBQ0EsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsSUFBSVAsZUFBZU8sTUFBTUUsQ0FBQyxLQUFLVCxlQUFlTyxNQUFNRyxDQUFDLEtBQUtWLGVBQWVPLE1BQU1JLENBQUMsR0FBRztZQUMvRUgsTUFBTSxDQUFDLEdBQUdMLGdCQUFnQmUsUUFBUSxFQUFFWCxNQUFNRSxDQUFDLEVBQUVGLE1BQU1HLENBQUMsRUFBRUgsTUFBTUksQ0FBQztZQUM3REssS0FBSztZQUNMQyxTQUFTRSxPQUFPWixNQUFNRSxDQUFDLEVBQUVXLE1BQU0sQ0FBQyxDQUFDLE9BQU8sTUFBTSxTQUFTO1FBQzNELE9BQ0ssSUFBSXBCLGVBQWVPLE1BQU1jLENBQUMsS0FBS3JCLGVBQWVPLE1BQU1NLENBQUMsS0FBS2IsZUFB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R0FBR0c7QUFDOUI7OztDQUdDLEdBQ0QsU0FBU0QsZUFBZU8sS0FBSztJQUN6QixPQUFPbUQsUUFBUXBCLFNBQVNKLFFBQVEsQ0FBQ3FCLElBQUksQ0FBQ3BDLE9BQU9aO0FBQ2pEO0FBQ0FULHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25kaW1ib25pLWZuLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L2Zvcm1hdC1pbnB1dC5qcz81Y2VlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1ZhbGlkQ1NTVW5pdCA9IGV4cG9ydHMuc3RyaW5nSW5wdXRUb09iamVjdCA9IGV4cG9ydHMuaW5wdXRUb1JHQiA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWR1bmRhbnQtdHlwZS1jb25zdGl0dWVudHMgKi9cbnZhciBjb252ZXJzaW9uX2pzXzEgPSByZXF1aXJlKFwiLi9jb252ZXJzaW9uLmpzXCIpO1xudmFyIGNzc19jb2xvcl9uYW1lc19qc18xID0gcmVxdWlyZShcIi4vY3NzLWNvbG9yLW5hbWVzLmpzXCIpO1xudmFyIHV0aWxfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIG9yIG9iamVjdCwgY29udmVydCB0aGF0IGlucHV0IHRvIFJHQlxuICpcbiAqIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4gKiBgYGBcbiAqIFwicmVkXCJcbiAqIFwiI2YwMFwiIG9yIFwiZjAwXCJcbiAqIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbiAqIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4gKiBcInJnYiAyNTUgMCAwXCIgb3IgXCJyZ2IgKDI1NSwgMCwgMClcIlxuICogXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4gKiBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbiAqIFwicmdiYSAoMS4wLCAwLCAwLCAxKVwiIG9yIFwicmdiYSAxLjAsIDAsIDAsIDFcIlxuICogXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuICogXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4gKiBcImhzdigwLCAxMDAlLCAxMDAlKVwiIG9yIFwiaHN2IDAgMTAwJSAxMDAlXCJcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnB1dFRvUkdCKGNvbG9yKSB7XG4gICAgdmFyIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIHZhciBhID0gMTtcbiAgICB2YXIgcyA9IG51bGw7XG4gICAgdmFyIHYgPSBudWxsO1xuICAgIHZhciBsID0gbnVsbDtcbiAgICB2YXIgb2sgPSBmYWxzZTtcbiAgICB2YXIgZm9ybWF0ID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29sb3IgPSBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLnIpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmcpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmIpKSB7XG4gICAgICAgICAgICByZ2IgPSAoMCwgY29udmVyc2lvbl9qc18xLnJnYlRvUmdiKShjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFN0cmluZyhjb2xvci5yKS5zdWJzdHIoLTEpID09PSAnJScgPyAncHJnYicgOiAncmdiJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci52KSkge1xuICAgICAgICAgICAgcyA9ICgwLCB1dGlsX2pzXzEuY29udmVydFRvUGVyY2VudGFnZSkoY29sb3Iucyk7XG4gICAgICAgICAgICB2ID0gKDAsIHV0aWxfanNfMS5jb252ZXJ0VG9QZXJjZW50YWdlKShjb2xvci52KTtcbiAgICAgICAgICAgIHJnYiA9ICgwLCBjb252ZXJzaW9uX2pzXzEuaHN2VG9SZ2IpKGNvbG9yLmgsIHMsIHYpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gJ2hzdic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IubCkpIHtcbiAgICAgICAgICAgIHMgPSAoMCwgdXRpbF9qc18xLmNvbnZlcnRUb1BlcmNlbnRhZ2UpKGNvbG9yLnMpO1xuICAgICAgICAgICAgbCA9ICgwLCB1dGlsX2pzXzEuY29udmVydFRvUGVyY2VudGFnZSkoY29sb3IubCk7XG4gICAgICAgICAgICByZ2IgPSAoMCwgY29udmVyc2lvbl9qc18xLmhzbFRvUmdiKShjb2xvci5oLCBzLCBsKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9ICdoc2wnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29sb3IsICdhJykpIHtcbiAgICAgICAgICAgIGEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfVxuICAgIGEgPSAoMCwgdXRpbF9qc18xLmJvdW5kQWxwaGEpKGEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9rOiBvayxcbiAgICAgICAgZm9ybWF0OiBjb2xvci5mb3JtYXQgfHwgZm9ybWF0LFxuICAgICAgICByOiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KHJnYi5yLCAwKSksXG4gICAgICAgIGc6IE1hdGgubWluKDI1NSwgTWF0aC5tYXgocmdiLmcsIDApKSxcbiAgICAgICAgYjogTWF0aC5taW4oMjU1LCBNYXRoLm1heChyZ2IuYiwgMCkpLFxuICAgICAgICBhOiBhLFxuICAgIH07XG59XG5leHBvcnRzLmlucHV0VG9SR0IgPSBpbnB1dFRvUkdCO1xuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbnZhciBDU1NfSU5URUdFUiA9ICdbLVxcXFwrXT9cXFxcZCslPyc7XG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbnZhciBDU1NfTlVNQkVSID0gJ1stXFxcXCtdP1xcXFxkKlxcXFwuXFxcXGQrJT8nO1xuLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxudmFyIENTU19VTklUID0gXCIoPzpcIi5jb25jYXQoQ1NTX05VTUJFUiwgXCIpfCg/OlwiKS5jb25jYXQoQ1NTX0lOVEVHRVIsIFwiKVwiKTtcbi8vIEFjdHVhbCBtYXRjaGluZy5cbi8vIFBhcmVudGhlc2VzIGFuZCBjb21tYXMgYXJlIG9wdGlvbmFsLCBidXQgbm90IHJlcXVpcmVkLlxuLy8gV2hpdGVzcGFjZSBjYW4gdGFrZSB0aGUgcGxhY2Ugb2YgY29tbWFzIG9yIG9wZW5pbmcgcGFyZW5cbnZhciBQRVJNSVNTSVZFX01BVENIMyA9IFwiW1xcXFxzfFxcXFwoXSsoXCIuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpXFxcXHMqXFxcXCk/XCIpO1xudmFyIFBFUk1JU1NJVkVfTUFUQ0g0ID0gXCJbXFxcXHN8XFxcXChdKyhcIi5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVxcXFxzKlxcXFwpP1wiKTtcbnZhciBtYXRjaGVycyA9IHtcbiAgICBDU1NfVU5JVDogbmV3IFJlZ0V4cChDU1NfVU5JVCksXG4gICAgcmdiOiBuZXcgUmVnRXhwKCdyZ2InICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgIHJnYmE6IG5ldyBSZWdFeHAoJ3JnYmEnICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgIGhzbDogbmV3IFJlZ0V4cCgnaHNsJyArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICBoc2xhOiBuZXcgUmVnRXhwKCdoc2xhJyArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICBoc3Y6IG5ldyBSZWdFeHAoJ2hzdicgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgaHN2YTogbmV3IFJlZ0V4cCgnaHN2YScgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgaGV4MzogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICBoZXg0OiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDg6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG59O1xuLyoqXG4gKiBQZXJtaXNzaXZlIHN0cmluZyBwYXJzaW5nLiAgVGFrZSBpbiBhIG51bWJlciBvZiBmb3JtYXRzLCBhbmQgb3V0cHV0IGFuIG9iamVjdFxuICogYmFzZWQgb24gZGV0ZWN0ZWQgZm9ybWF0LiAgUmV0dXJucyBgeyByLCBnLCBiIH1gIG9yIGB7IGgsIHMsIGwgfWAgb3IgYHsgaCwgcywgdn1gXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpIHtcbiAgICBjb2xvciA9IGNvbG9yLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChjb2xvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgbmFtZWQgPSBmYWxzZTtcbiAgICBpZiAoY3NzX2NvbG9yX25hbWVzX2pzXzEubmFtZXNbY29sb3JdKSB7XG4gICAgICAgIGNvbG9yID0gY3NzX2NvbG9yX25hbWVzX2pzXzEubmFtZXNbY29sb3JdO1xuICAgICAgICBuYW1lZCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogJ25hbWUnIH07XG4gICAgfVxuICAgIC8vIFRyeSB0byBtYXRjaCBzdHJpbmcgaW5wdXQgdXNpbmcgcmVndWxhciBleHByZXNzaW9ucy5cbiAgICAvLyBLZWVwIG1vc3Qgb2YgdGhlIG51bWJlciBib3VuZGluZyBvdXQgb2YgdGhpcyBmdW5jdGlvbiAtIGRvbid0IHdvcnJ5IGFib3V0IFswLDFdIG9yIFswLDEwMF0gb3IgWzAsMzYwXVxuICAgIC8vIEp1c3QgcmV0dXJuIGFuIG9iamVjdCBhbmQgbGV0IHRoZSBjb252ZXJzaW9uIGZ1bmN0aW9ucyBoYW5kbGUgdGhhdC5cbiAgICAvLyBUaGlzIHdheSB0aGUgcmVzdWx0IHdpbGwgYmUgdGhlIHNhbWUgd2hldGhlciB0aGUgdGlueWNvbG9yIGlzIGluaXRpYWxpemVkIHdpdGggc3RyaW5nIG9yIG9iamVjdC5cbiAgICB2YXIgbWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5yZ2JhLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzbC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHN2LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIHY6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHN2YS5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogKDAsIGNvbnZlcnNpb25fanNfMS5wYXJzZUludEZyb21IZXgpKG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6ICgwLCBjb252ZXJzaW9uX2pzXzEucGFyc2VJbnRGcm9tSGV4KShtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiAoMCwgY29udmVyc2lvbl9qc18xLnBhcnNlSW50RnJvbUhleCkobWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogKDAsIGNvbnZlcnNpb25fanNfMS5jb252ZXJ0SGV4VG9EZWNpbWFsKShtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleDgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDYuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiAoMCwgY29udmVyc2lvbl9qc18xLnBhcnNlSW50RnJvbUhleCkobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogKDAsIGNvbnZlcnNpb25fanNfMS5wYXJzZUludEZyb21IZXgpKG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6ICgwLCBjb252ZXJzaW9uX2pzXzEucGFyc2VJbnRGcm9tSGV4KShtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4NC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6ICgwLCBjb252ZXJzaW9uX2pzXzEucGFyc2VJbnRGcm9tSGV4KShtYXRjaFsxXSArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6ICgwLCBjb252ZXJzaW9uX2pzXzEucGFyc2VJbnRGcm9tSGV4KShtYXRjaFsyXSArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6ICgwLCBjb252ZXJzaW9uX2pzXzEucGFyc2VJbnRGcm9tSGV4KShtYXRjaFszXSArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6ICgwLCBjb252ZXJzaW9uX2pzXzEuY29udmVydEhleFRvRGVjaW1hbCkobWF0Y2hbNF0gKyBtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleDgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDMuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiAoMCwgY29udmVyc2lvbl9qc18xLnBhcnNlSW50RnJvbUhleCkobWF0Y2hbMV0gKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiAoMCwgY29udmVyc2lvbl9qc18xLnBhcnNlSW50RnJvbUhleCkobWF0Y2hbMl0gKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiAoMCwgY29udmVyc2lvbl9qc18xLnBhcnNlSW50RnJvbUhleCkobWF0Y2hbM10gKyBtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuc3RyaW5nSW5wdXRUb09iamVjdCA9IHN0cmluZ0lucHV0VG9PYmplY3Q7XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgQ1NTIHVuaXRcbiAqIChzZWUgYG1hdGNoZXJzYCBhYm92ZSBmb3IgZGVmaW5pdGlvbikuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRDU1NVbml0KGNvbG9yKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4obWF0Y2hlcnMuQ1NTX1VOSVQuZXhlYyhTdHJpbmcoY29sb3IpKSk7XG59XG5leHBvcnRzLmlzVmFsaWRDU1NVbml0ID0gaXNWYWxpZENTU1VuaXQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1ZhbGlkQ1NTVW5pdCIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJpbnB1dFRvUkdCIiwiY29udmVyc2lvbl9qc18xIiwicmVxdWlyZSIsImNzc19jb2xvcl9uYW1lc19qc18xIiwidXRpbF9qc18xIiwiY29sb3IiLCJyZ2IiLCJyIiwiZyIsImIiLCJhIiwicyIsInYiLCJsIiwib2siLCJmb3JtYXQiLCJyZ2JUb1JnYiIsIlN0cmluZyIsInN1YnN0ciIsImgiLCJjb252ZXJ0VG9QZXJjZW50YWdlIiwiaHN2VG9SZ2IiLCJoc2xUb1JnYiIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImJvdW5kQWxwaGEiLCJNYXRoIiwibWluIiwibWF4IiwiQ1NTX0lOVEVHRVIiLCJDU1NfTlVNQkVSIiwiQ1NTX1VOSVQiLCJjb25jYXQiLCJQRVJNSVNTSVZFX01BVENIMyIsIlBFUk1JU1NJVkVfTUFUQ0g0IiwibWF0Y2hlcnMiLCJSZWdFeHAiLCJyZ2JhIiwiaHNsIiwiaHNsYSIsImhzdiIsImhzdmEiLCJoZXgzIiwiaGV4NiIsImhleDQiLCJoZXg4IiwidHJpbSIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwibmFtZWQiLCJuYW1lcyIsIm1hdGNoIiwiZXhlYyIsInBhcnNlSW50RnJvbUhleCIsImNvbnZlcnRIZXhUb0RlY2ltYWwiLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/format-input.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/from-ratio.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/from-ratio.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.legacyRandom = exports.fromRatio = void 0;\nvar index_js_1 = __webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\");\nvar util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/@ctrl/tinycolor/dist/util.js\");\n/**\n * If input is an object, force 1 into \"1.0\" to handle ratios properly\n * String input requires \"1.0\" as input, so 1 will be treated as 1\n */ function fromRatio(ratio, opts) {\n    var newColor = {\n        r: (0, util_js_1.convertToPercentage)(ratio.r),\n        g: (0, util_js_1.convertToPercentage)(ratio.g),\n        b: (0, util_js_1.convertToPercentage)(ratio.b)\n    };\n    if (ratio.a !== undefined) {\n        newColor.a = Number(ratio.a);\n    }\n    return new index_js_1.TinyColor(newColor, opts);\n}\nexports.fromRatio = fromRatio;\n/** old random function */ function legacyRandom() {\n    return new index_js_1.TinyColor({\n        r: Math.random(),\n        g: Math.random(),\n        b: Math.random()\n    });\n}\nexports.legacyRandom = legacyRandom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvZnJvbS1yYXRpby5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDaEQsSUFBSUksYUFBYUMsbUJBQU9BLENBQUMsZ0VBQVk7QUFDckMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsOERBQVc7QUFDbkM7OztDQUdDLEdBQ0QsU0FBU0YsVUFBVUksS0FBSyxFQUFFQyxJQUFJO0lBQzFCLElBQUlDLFdBQVc7UUFDWEMsR0FBRyxDQUFDLEdBQUdKLFVBQVVLLG1CQUFtQixFQUFFSixNQUFNRyxDQUFDO1FBQzdDRSxHQUFHLENBQUMsR0FBR04sVUFBVUssbUJBQW1CLEVBQUVKLE1BQU1LLENBQUM7UUFDN0NDLEdBQUcsQ0FBQyxHQUFHUCxVQUFVSyxtQkFBbUIsRUFBRUosTUFBTU0sQ0FBQztJQUNqRDtJQUNBLElBQUlOLE1BQU1PLENBQUMsS0FBS0MsV0FBVztRQUN2Qk4sU0FBU0ssQ0FBQyxHQUFHRSxPQUFPVCxNQUFNTyxDQUFDO0lBQy9CO0lBQ0EsT0FBTyxJQUFJVixXQUFXYSxTQUFTLENBQUNSLFVBQVVEO0FBQzlDO0FBQ0FSLGlCQUFpQixHQUFHRztBQUNwQix3QkFBd0IsR0FDeEIsU0FBU0Q7SUFDTCxPQUFPLElBQUlFLFdBQVdhLFNBQVMsQ0FBQztRQUM1QlAsR0FBR1EsS0FBS0MsTUFBTTtRQUNkUCxHQUFHTSxLQUFLQyxNQUFNO1FBQ2ROLEdBQUdLLEtBQUtDLE1BQU07SUFDbEI7QUFDSjtBQUNBbkIsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmRpbWJvbmktZm4vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvZnJvbS1yYXRpby5qcz8zMTBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sZWdhY3lSYW5kb20gPSBleHBvcnRzLmZyb21SYXRpbyA9IHZvaWQgMDtcbnZhciBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vaW5kZXguanNcIik7XG52YXIgdXRpbF9qc18xID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbi8qKlxuICogSWYgaW5wdXQgaXMgYW4gb2JqZWN0LCBmb3JjZSAxIGludG8gXCIxLjBcIiB0byBoYW5kbGUgcmF0aW9zIHByb3Blcmx5XG4gKiBTdHJpbmcgaW5wdXQgcmVxdWlyZXMgXCIxLjBcIiBhcyBpbnB1dCwgc28gMSB3aWxsIGJlIHRyZWF0ZWQgYXMgMVxuICovXG5mdW5jdGlvbiBmcm9tUmF0aW8ocmF0aW8sIG9wdHMpIHtcbiAgICB2YXIgbmV3Q29sb3IgPSB7XG4gICAgICAgIHI6ICgwLCB1dGlsX2pzXzEuY29udmVydFRvUGVyY2VudGFnZSkocmF0aW8uciksXG4gICAgICAgIGc6ICgwLCB1dGlsX2pzXzEuY29udmVydFRvUGVyY2VudGFnZSkocmF0aW8uZyksXG4gICAgICAgIGI6ICgwLCB1dGlsX2pzXzEuY29udmVydFRvUGVyY2VudGFnZSkocmF0aW8uYiksXG4gICAgfTtcbiAgICBpZiAocmF0aW8uYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld0NvbG9yLmEgPSBOdW1iZXIocmF0aW8uYSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgaW5kZXhfanNfMS5UaW55Q29sb3IobmV3Q29sb3IsIG9wdHMpO1xufVxuZXhwb3J0cy5mcm9tUmF0aW8gPSBmcm9tUmF0aW87XG4vKiogb2xkIHJhbmRvbSBmdW5jdGlvbiAqL1xuZnVuY3Rpb24gbGVnYWN5UmFuZG9tKCkge1xuICAgIHJldHVybiBuZXcgaW5kZXhfanNfMS5UaW55Q29sb3Ioe1xuICAgICAgICByOiBNYXRoLnJhbmRvbSgpLFxuICAgICAgICBnOiBNYXRoLnJhbmRvbSgpLFxuICAgICAgICBiOiBNYXRoLnJhbmRvbSgpLFxuICAgIH0pO1xufVxuZXhwb3J0cy5sZWdhY3lSYW5kb20gPSBsZWdhY3lSYW5kb207XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJsZWdhY3lSYW5kb20iLCJmcm9tUmF0aW8iLCJpbmRleF9qc18xIiwicmVxdWlyZSIsInV0aWxfanNfMSIsInJhdGlvIiwib3B0cyIsIm5ld0NvbG9yIiwiciIsImNvbnZlcnRUb1BlcmNlbnRhZ2UiLCJnIiwiYiIsImEiLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJUaW55Q29sb3IiLCJNYXRoIiwicmFuZG9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/from-ratio.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.tinycolor = exports.TinyColor = void 0;\nvar conversion_js_1 = __webpack_require__(/*! ./conversion.js */ \"./node_modules/@ctrl/tinycolor/dist/conversion.js\");\nvar css_color_names_js_1 = __webpack_require__(/*! ./css-color-names.js */ \"./node_modules/@ctrl/tinycolor/dist/css-color-names.js\");\nvar format_input_1 = __webpack_require__(/*! ./format-input */ \"./node_modules/@ctrl/tinycolor/dist/format-input.js\");\nvar util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/@ctrl/tinycolor/dist/util.js\");\nvar TinyColor = /** @class */ function() {\n    function TinyColor(color, opts) {\n        if (color === void 0) {\n            color = \"\";\n        }\n        if (opts === void 0) {\n            opts = {};\n        }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === \"number\") {\n            color = (0, conversion_js_1.numberInputToObject)(color);\n        }\n        this.originalInput = color;\n        var rgb = (0, format_input_1.inputToRGB)(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function() {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function() {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */ TinyColor.prototype.getBrightness = function() {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */ TinyColor.prototype.getLuminance = function() {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        } else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        } else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        } else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */ TinyColor.prototype.getAlpha = function() {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */ TinyColor.prototype.setAlpha = function(alpha) {\n        this.a = (0, util_js_1.boundAlpha)(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns whether the color is monochrome.\n     */ TinyColor.prototype.isMonochrome = function() {\n        var s = this.toHsl().s;\n        return s === 0;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */ TinyColor.prototype.toHsv = function() {\n        var hsv = (0, conversion_js_1.rgbToHsv)(this.r, this.g, this.b);\n        return {\n            h: hsv.h * 360,\n            s: hsv.s,\n            v: hsv.v,\n            a: this.a\n        };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */ TinyColor.prototype.toHsvString = function() {\n        var hsv = (0, conversion_js_1.rgbToHsv)(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */ TinyColor.prototype.toHsl = function() {\n        var hsl = (0, conversion_js_1.rgbToHsl)(this.r, this.g, this.b);\n        return {\n            h: hsl.h * 360,\n            s: hsl.s,\n            l: hsl.l,\n            a: this.a\n        };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */ TinyColor.prototype.toHslString = function() {\n        var hsl = (0, conversion_js_1.rgbToHsl)(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */ TinyColor.prototype.toHex = function(allow3Char) {\n        if (allow3Char === void 0) {\n            allow3Char = false;\n        }\n        return (0, conversion_js_1.rgbToHex)(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */ TinyColor.prototype.toHexString = function(allow3Char) {\n        if (allow3Char === void 0) {\n            allow3Char = false;\n        }\n        return \"#\" + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */ TinyColor.prototype.toHex8 = function(allow4Char) {\n        if (allow4Char === void 0) {\n            allow4Char = false;\n        }\n        return (0, conversion_js_1.rgbaToHex)(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */ TinyColor.prototype.toHex8String = function(allow4Char) {\n        if (allow4Char === void 0) {\n            allow4Char = false;\n        }\n        return \"#\" + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */ TinyColor.prototype.toHexShortString = function(allowShortChar) {\n        if (allowShortChar === void 0) {\n            allowShortChar = false;\n        }\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */ TinyColor.prototype.toRgb = function() {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */ TinyColor.prototype.toRgbString = function() {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */ TinyColor.prototype.toPercentageRgb = function() {\n        var fmt = function(x) {\n            return \"\".concat(Math.round((0, util_js_1.bound01)(x, 255) * 100), \"%\");\n        };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */ TinyColor.prototype.toPercentageRgbString = function() {\n        var rnd = function(x) {\n            return Math.round((0, util_js_1.bound01)(x, 255) * 100);\n        };\n        return this.a === 1 ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\") : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */ TinyColor.prototype.toName = function() {\n        if (this.a === 0) {\n            return \"transparent\";\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = \"#\" + (0, conversion_js_1.rgbToHex)(this.r, this.g, this.b, false);\n        for(var _i = 0, _a = Object.entries(css_color_names_js_1.names); _i < _a.length; _i++){\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function(format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith(\"hex\") || format === \"name\");\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function() {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function() {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.lighten = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = (0, util_js_1.clamp01)(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.brighten = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.darken = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = (0, util_js_1.clamp01)(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.tint = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        return this.mix(\"white\", amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.shade = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        return this.mix(\"black\", amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.desaturate = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = (0, util_js_1.clamp01)(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */ TinyColor.prototype.saturate = function(amount) {\n        if (amount === void 0) {\n            amount = 10;\n        }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = (0, util_js_1.clamp01)(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */ TinyColor.prototype.greyscale = function() {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */ TinyColor.prototype.spin = function(amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */ TinyColor.prototype.mix = function(color, amount) {\n        if (amount === void 0) {\n            amount = 50;\n        }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function(results, slices) {\n        if (results === void 0) {\n            results = 6;\n        }\n        if (slices === void 0) {\n            slices = 30;\n        }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [\n            this\n        ];\n        for(hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;){\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */ TinyColor.prototype.complement = function() {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function(results) {\n        if (results === void 0) {\n            results = 6;\n        }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while(results--){\n            res.push(new TinyColor({\n                h: h,\n                s: s,\n                v: v\n            }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function() {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({\n                h: (h + 72) % 360,\n                s: hsl.s,\n                l: hsl.l\n            }),\n            new TinyColor({\n                h: (h + 216) % 360,\n                s: hsl.s,\n                l: hsl.l\n            })\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */ TinyColor.prototype.onBackground = function(background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        var alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */ TinyColor.prototype.triad = function() {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */ TinyColor.prototype.tetrad = function() {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */ TinyColor.prototype.polyad = function(n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [\n            this\n        ];\n        var increment = 360 / n;\n        for(var i = 1; i < n; i++){\n            result.push(new TinyColor({\n                h: (h + i * increment) % 360,\n                s: hsl.s,\n                l: hsl.l\n            }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */ TinyColor.prototype.equals = function(color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}();\nexports.TinyColor = TinyColor;\n// kept for backwards compatability with v1\nfunction tinycolor(color, opts) {\n    if (color === void 0) {\n        color = \"\";\n    }\n    if (opts === void 0) {\n        opts = {};\n    }\n    return new TinyColor(color, opts);\n}\nexports.tinycolor = tinycolor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/interfaces.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/interfaces.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25kaW1ib25pLWZuLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L2ludGVyZmFjZXMuanM/NjVlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/interfaces.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/public_api.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/public_api.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar index_js_1 = __webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\");\n__exportStar(__webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./css-color-names.js */ \"./node_modules/@ctrl/tinycolor/dist/css-color-names.js\"), exports);\n__exportStar(__webpack_require__(/*! ./readability.js */ \"./node_modules/@ctrl/tinycolor/dist/readability.js\"), exports);\n__exportStar(__webpack_require__(/*! ./to-ms-filter.js */ \"./node_modules/@ctrl/tinycolor/dist/to-ms-filter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./from-ratio.js */ \"./node_modules/@ctrl/tinycolor/dist/from-ratio.js\"), exports);\n__exportStar(__webpack_require__(/*! ./format-input.js */ \"./node_modules/@ctrl/tinycolor/dist/format-input.js\"), exports);\n__exportStar(__webpack_require__(/*! ./random.js */ \"./node_modules/@ctrl/tinycolor/dist/random.js\"), exports);\n__exportStar(__webpack_require__(/*! ./interfaces.js */ \"./node_modules/@ctrl/tinycolor/dist/interfaces.js\"), exports);\n__exportStar(__webpack_require__(/*! ./conversion.js */ \"./node_modules/@ctrl/tinycolor/dist/conversion.js\"), exports);\n// kept for backwards compatability with v1\nexports[\"default\"] = index_js_1.tinycolor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvcHVibGljX2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxhQUFhQyxtQkFBT0EsQ0FBQyxnRUFBWTtBQUNyQ1IsYUFBYVEsbUJBQU9BLENBQUMsZ0VBQVksR0FBR1A7QUFDcENELGFBQWFRLG1CQUFPQSxDQUFDLG9GQUFzQixHQUFHUDtBQUM5Q0QsYUFBYVEsbUJBQU9BLENBQUMsNEVBQWtCLEdBQUdQO0FBQzFDRCxhQUFhUSxtQkFBT0EsQ0FBQyw4RUFBbUIsR0FBR1A7QUFDM0NELGFBQWFRLG1CQUFPQSxDQUFDLDBFQUFpQixHQUFHUDtBQUN6Q0QsYUFBYVEsbUJBQU9BLENBQUMsOEVBQW1CLEdBQUdQO0FBQzNDRCxhQUFhUSxtQkFBT0EsQ0FBQyxrRUFBYSxHQUFHUDtBQUNyQ0QsYUFBYVEsbUJBQU9BLENBQUMsMEVBQWlCLEdBQUdQO0FBQ3pDRCxhQUFhUSxtQkFBT0EsQ0FBQywwRUFBaUIsR0FBR1A7QUFDekMsMkNBQTJDO0FBQzNDQSxrQkFBZSxHQUFHTSxXQUFXRyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmRpbWJvbmktZm4vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvcHVibGljX2FwaS5qcz9lZDhkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL2luZGV4LmpzXCIpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luZGV4LmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jc3MtY29sb3ItbmFtZXMuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlYWRhYmlsaXR5LmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90by1tcy1maWx0ZXIuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Zyb20tcmF0aW8uanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Zvcm1hdC1pbnB1dC5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcmFuZG9tLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnRlcmZhY2VzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJzaW9uLmpzXCIpLCBleHBvcnRzKTtcbi8vIGtlcHQgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IHdpdGggdjFcbmV4cG9ydHMuZGVmYXVsdCA9IGluZGV4X2pzXzEudGlueWNvbG9yO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJ0aW55Y29sb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/public_api.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/random.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/random.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bounds = exports.random = void 0;\n/* eslint-disable @typescript-eslint/no-redundant-type-constituents */ // randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\nvar index_js_1 = __webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\");\nfunction random(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    // Check if we need to generate multiple colors\n    if (options.count !== undefined && options.count !== null) {\n        var totalColors = options.count;\n        var colors = [];\n        options.count = undefined;\n        while(totalColors > colors.length){\n            // Since we're generating multiple colors,\n            // incremement the seed. Otherwise we'd just\n            // generate the same color each time...\n            options.count = null;\n            if (options.seed) {\n                options.seed += 1;\n            }\n            colors.push(random(options));\n        }\n        options.count = totalColors;\n        return colors;\n    }\n    // First we pick a hue (H)\n    var h = pickHue(options.hue, options.seed);\n    // Then use H to determine saturation (S)\n    var s = pickSaturation(h, options);\n    // Then use S and H to determine brightness (B).\n    var v = pickBrightness(h, s, options);\n    var res = {\n        h: h,\n        s: s,\n        v: v\n    };\n    if (options.alpha !== undefined) {\n        res.a = options.alpha;\n    }\n    // Then we return the HSB color in the desired format\n    return new index_js_1.TinyColor(res);\n}\nexports.random = random;\nfunction pickHue(hue, seed) {\n    var hueRange = getHueRange(hue);\n    var res = randomWithin(hueRange, seed);\n    // Instead of storing red as two seperate ranges,\n    // we group them, using negative numbers\n    if (res < 0) {\n        res = 360 + res;\n    }\n    return res;\n}\nfunction pickSaturation(hue, options) {\n    if (options.hue === \"monochrome\") {\n        return 0;\n    }\n    if (options.luminosity === \"random\") {\n        return randomWithin([\n            0,\n            100\n        ], options.seed);\n    }\n    var saturationRange = getColorInfo(hue).saturationRange;\n    var sMin = saturationRange[0];\n    var sMax = saturationRange[1];\n    switch(options.luminosity){\n        case \"bright\":\n            sMin = 55;\n            break;\n        case \"dark\":\n            sMin = sMax - 10;\n            break;\n        case \"light\":\n            sMax = 55;\n            break;\n        default:\n            break;\n    }\n    return randomWithin([\n        sMin,\n        sMax\n    ], options.seed);\n}\nfunction pickBrightness(H, S, options) {\n    var bMin = getMinimumBrightness(H, S);\n    var bMax = 100;\n    switch(options.luminosity){\n        case \"dark\":\n            bMax = bMin + 20;\n            break;\n        case \"light\":\n            bMin = (bMax + bMin) / 2;\n            break;\n        case \"random\":\n            bMin = 0;\n            bMax = 100;\n            break;\n        default:\n            break;\n    }\n    return randomWithin([\n        bMin,\n        bMax\n    ], options.seed);\n}\nfunction getMinimumBrightness(H, S) {\n    var lowerBounds = getColorInfo(H).lowerBounds;\n    for(var i = 0; i < lowerBounds.length - 1; i++){\n        var s1 = lowerBounds[i][0];\n        var v1 = lowerBounds[i][1];\n        var s2 = lowerBounds[i + 1][0];\n        var v2 = lowerBounds[i + 1][1];\n        if (S >= s1 && S <= s2) {\n            var m = (v2 - v1) / (s2 - s1);\n            var b = v1 - m * s1;\n            return m * S + b;\n        }\n    }\n    return 0;\n}\nfunction getHueRange(colorInput) {\n    var num = parseInt(colorInput, 10);\n    if (!Number.isNaN(num) && num < 360 && num > 0) {\n        return [\n            num,\n            num\n        ];\n    }\n    if (typeof colorInput === \"string\") {\n        var namedColor = exports.bounds.find(function(n) {\n            return n.name === colorInput;\n        });\n        if (namedColor) {\n            var color = defineColor(namedColor);\n            if (color.hueRange) {\n                return color.hueRange;\n            }\n        }\n        var parsed = new index_js_1.TinyColor(colorInput);\n        if (parsed.isValid) {\n            var hue = parsed.toHsv().h;\n            return [\n                hue,\n                hue\n            ];\n        }\n    }\n    return [\n        0,\n        360\n    ];\n}\nfunction getColorInfo(hue) {\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n        hue -= 360;\n    }\n    for(var _i = 0, bounds_1 = exports.bounds; _i < bounds_1.length; _i++){\n        var bound = bounds_1[_i];\n        var color = defineColor(bound);\n        if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\n            return color;\n        }\n    }\n    throw Error(\"Color not found\");\n}\nfunction randomWithin(range, seed) {\n    if (seed === undefined) {\n        return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));\n    }\n    // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n    var max = range[1] || 1;\n    var min = range[0] || 0;\n    seed = (seed * 9301 + 49297) % 233280;\n    var rnd = seed / 233280.0;\n    return Math.floor(min + rnd * (max - min));\n}\nfunction defineColor(bound) {\n    var sMin = bound.lowerBounds[0][0];\n    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];\n    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];\n    var bMax = bound.lowerBounds[0][1];\n    return {\n        name: bound.name,\n        hueRange: bound.hueRange,\n        lowerBounds: bound.lowerBounds,\n        saturationRange: [\n            sMin,\n            sMax\n        ],\n        brightnessRange: [\n            bMin,\n            bMax\n        ]\n    };\n}\n/**\n * @hidden\n */ exports.bounds = [\n    {\n        name: \"monochrome\",\n        hueRange: null,\n        lowerBounds: [\n            [\n                0,\n                0\n            ],\n            [\n                100,\n                0\n            ]\n        ]\n    },\n    {\n        name: \"red\",\n        hueRange: [\n            -26,\n            18\n        ],\n        lowerBounds: [\n            [\n                20,\n                100\n            ],\n            [\n                30,\n                92\n            ],\n            [\n                40,\n                89\n            ],\n            [\n                50,\n                85\n            ],\n            [\n                60,\n                78\n            ],\n            [\n                70,\n                70\n            ],\n            [\n                80,\n                60\n            ],\n            [\n                90,\n                55\n            ],\n            [\n                100,\n                50\n            ]\n        ]\n    },\n    {\n        name: \"orange\",\n        hueRange: [\n            19,\n            46\n        ],\n        lowerBounds: [\n            [\n                20,\n                100\n            ],\n            [\n                30,\n                93\n            ],\n            [\n                40,\n                88\n            ],\n            [\n                50,\n                86\n            ],\n            [\n                60,\n                85\n            ],\n            [\n                70,\n                70\n            ],\n            [\n                100,\n                70\n            ]\n        ]\n    },\n    {\n        name: \"yellow\",\n        hueRange: [\n            47,\n            62\n        ],\n        lowerBounds: [\n            [\n                25,\n                100\n            ],\n            [\n                40,\n                94\n            ],\n            [\n                50,\n                89\n            ],\n            [\n                60,\n                86\n            ],\n            [\n                70,\n                84\n            ],\n            [\n                80,\n                82\n            ],\n            [\n                90,\n                80\n            ],\n            [\n                100,\n                75\n            ]\n        ]\n    },\n    {\n        name: \"green\",\n        hueRange: [\n            63,\n            178\n        ],\n        lowerBounds: [\n            [\n                30,\n                100\n            ],\n            [\n                40,\n                90\n            ],\n            [\n                50,\n                85\n            ],\n            [\n                60,\n                81\n            ],\n            [\n                70,\n                74\n            ],\n            [\n                80,\n                64\n            ],\n            [\n                90,\n                50\n            ],\n            [\n                100,\n                40\n            ]\n        ]\n    },\n    {\n        name: \"blue\",\n        hueRange: [\n            179,\n            257\n        ],\n        lowerBounds: [\n            [\n                20,\n                100\n            ],\n            [\n                30,\n                86\n            ],\n            [\n                40,\n                80\n            ],\n            [\n                50,\n                74\n            ],\n            [\n                60,\n                60\n            ],\n            [\n                70,\n                52\n            ],\n            [\n                80,\n                44\n            ],\n            [\n                90,\n                39\n            ],\n            [\n                100,\n                35\n            ]\n        ]\n    },\n    {\n        name: \"purple\",\n        hueRange: [\n            258,\n            282\n        ],\n        lowerBounds: [\n            [\n                20,\n                100\n            ],\n            [\n                30,\n                87\n            ],\n            [\n                40,\n                79\n            ],\n            [\n                50,\n                70\n            ],\n            [\n                60,\n                65\n            ],\n            [\n                70,\n                59\n            ],\n            [\n                80,\n                52\n            ],\n            [\n                90,\n                45\n            ],\n            [\n                100,\n                42\n            ]\n        ]\n    },\n    {\n        name: \"pink\",\n        hueRange: [\n            283,\n            334\n        ],\n        lowerBounds: [\n            [\n                20,\n                100\n            ],\n            [\n                30,\n                90\n            ],\n            [\n                40,\n                86\n            ],\n            [\n                60,\n                84\n            ],\n            [\n                80,\n                80\n            ],\n            [\n                90,\n                75\n            ],\n            [\n                100,\n                73\n            ]\n        ]\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/random.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/readability.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/readability.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.mostReadable = exports.isReadable = exports.readability = void 0;\nvar index_js_1 = __webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\");\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n/**\n * AKA `contrast`\n *\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n */ function readability(color1, color2) {\n    var c1 = new index_js_1.TinyColor(color1);\n    var c2 = new index_js_1.TinyColor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n}\nexports.readability = readability;\n/**\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n * The third argument is an object.\n *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n * If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n *\n * Example\n * ```ts\n * new TinyColor().isReadable('#000', '#111') => false\n * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false\n * ```\n */ function isReadable(color1, color2, wcag2) {\n    var _a, _b;\n    if (wcag2 === void 0) {\n        wcag2 = {\n            level: \"AA\",\n            size: \"small\"\n        };\n    }\n    var readabilityLevel = readability(color1, color2);\n    switch(((_a = wcag2.level) !== null && _a !== void 0 ? _a : \"AA\") + ((_b = wcag2.size) !== null && _b !== void 0 ? _b : \"small\")){\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            return readabilityLevel >= 4.5;\n        case \"AAlarge\":\n            return readabilityLevel >= 3;\n        case \"AAAsmall\":\n            return readabilityLevel >= 7;\n        default:\n            return false;\n    }\n}\nexports.isReadable = isReadable;\n/**\n * Given a base color and a list of possible foreground or background\n * colors for that base, returns the most readable color.\n * Optionally returns Black or White if the most readable color is unreadable.\n *\n * @param baseColor - the base color.\n * @param colorList - array of colors to pick the most readable one from.\n * @param args - and object with extra arguments\n *\n * Example\n * ```ts\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'], { includeFallbackColors: false }).toHexString(); // \"#112255\"\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'],{ includeFallbackColors: true }).toHexString();  // \"#ffffff\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // \"#faf3f3\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // \"#ffffff\"\n * ```\n */ function mostReadable(baseColor, colorList, args) {\n    if (args === void 0) {\n        args = {\n            includeFallbackColors: false,\n            level: \"AA\",\n            size: \"small\"\n        };\n    }\n    var bestColor = null;\n    var bestScore = 0;\n    var includeFallbackColors = args.includeFallbackColors, level = args.level, size = args.size;\n    for(var _i = 0, colorList_1 = colorList; _i < colorList_1.length; _i++){\n        var color = colorList_1[_i];\n        var score = readability(baseColor, color);\n        if (score > bestScore) {\n            bestScore = score;\n            bestColor = new index_js_1.TinyColor(color);\n        }\n    }\n    if (isReadable(baseColor, bestColor, {\n        level: level,\n        size: size\n    }) || !includeFallbackColors) {\n        return bestColor;\n    }\n    args.includeFallbackColors = false;\n    return mostReadable(baseColor, [\n        \"#fff\",\n        \"#000\"\n    ], args);\n}\nexports.mostReadable = mostReadable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/readability.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/to-ms-filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/to-ms-filter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toMsFilter = void 0;\nvar conversion_js_1 = __webpack_require__(/*! ./conversion.js */ \"./node_modules/@ctrl/tinycolor/dist/conversion.js\");\nvar index_js_1 = __webpack_require__(/*! ./index.js */ \"./node_modules/@ctrl/tinycolor/dist/index.js\");\n/**\n * Returns the color represented as a Microsoft filter for use in old versions of IE.\n */ function toMsFilter(firstColor, secondColor) {\n    var color = new index_js_1.TinyColor(firstColor);\n    var hex8String = \"#\" + (0, conversion_js_1.rgbaToArgbHex)(color.r, color.g, color.b, color.a);\n    var secondHex8String = hex8String;\n    var gradientType = color.gradientType ? \"GradientType = 1, \" : \"\";\n    if (secondColor) {\n        var s = new index_js_1.TinyColor(secondColor);\n        secondHex8String = \"#\" + (0, conversion_js_1.rgbaToArgbHex)(s.r, s.g, s.b, s.a);\n    }\n    return \"progid:DXImageTransform.Microsoft.gradient(\".concat(gradientType, \"startColorstr=\").concat(hex8String, \",endColorstr=\").concat(secondHex8String, \")\");\n}\nexports.toMsFilter = toMsFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvdG8tbXMtZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLElBQUlHLGtCQUFrQkMsbUJBQU9BLENBQUMsMEVBQWlCO0FBQy9DLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDLGdFQUFZO0FBQ3JDOztDQUVDLEdBQ0QsU0FBU0YsV0FBV0ksVUFBVSxFQUFFQyxXQUFXO0lBQ3ZDLElBQUlDLFFBQVEsSUFBSUgsV0FBV0ksU0FBUyxDQUFDSDtJQUNyQyxJQUFJSSxhQUFhLE1BQU0sQ0FBQyxHQUFHUCxnQkFBZ0JRLGFBQWEsRUFBRUgsTUFBTUksQ0FBQyxFQUFFSixNQUFNSyxDQUFDLEVBQUVMLE1BQU1NLENBQUMsRUFBRU4sTUFBTU8sQ0FBQztJQUM1RixJQUFJQyxtQkFBbUJOO0lBQ3ZCLElBQUlPLGVBQWVULE1BQU1TLFlBQVksR0FBRyx1QkFBdUI7SUFDL0QsSUFBSVYsYUFBYTtRQUNiLElBQUlXLElBQUksSUFBSWIsV0FBV0ksU0FBUyxDQUFDRjtRQUNqQ1MsbUJBQW1CLE1BQU0sQ0FBQyxHQUFHYixnQkFBZ0JRLGFBQWEsRUFBRU8sRUFBRU4sQ0FBQyxFQUFFTSxFQUFFTCxDQUFDLEVBQUVLLEVBQUVKLENBQUMsRUFBRUksRUFBRUgsQ0FBQztJQUNsRjtJQUNBLE9BQU8sOENBQThDSSxNQUFNLENBQUNGLGNBQWMsa0JBQWtCRSxNQUFNLENBQUNULFlBQVksaUJBQWlCUyxNQUFNLENBQUNILGtCQUFrQjtBQUM3SjtBQUNBaEIsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmRpbWJvbmktZm4vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvdG8tbXMtZmlsdGVyLmpzP2UzZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvTXNGaWx0ZXIgPSB2b2lkIDA7XG52YXIgY29udmVyc2lvbl9qc18xID0gcmVxdWlyZShcIi4vY29udmVyc2lvbi5qc1wiKTtcbnZhciBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vaW5kZXguanNcIik7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbG9yIHJlcHJlc2VudGVkIGFzIGEgTWljcm9zb2Z0IGZpbHRlciBmb3IgdXNlIGluIG9sZCB2ZXJzaW9ucyBvZiBJRS5cbiAqL1xuZnVuY3Rpb24gdG9Nc0ZpbHRlcihmaXJzdENvbG9yLCBzZWNvbmRDb2xvcikge1xuICAgIHZhciBjb2xvciA9IG5ldyBpbmRleF9qc18xLlRpbnlDb2xvcihmaXJzdENvbG9yKTtcbiAgICB2YXIgaGV4OFN0cmluZyA9ICcjJyArICgwLCBjb252ZXJzaW9uX2pzXzEucmdiYVRvQXJnYkhleCkoY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgY29sb3IuYSk7XG4gICAgdmFyIHNlY29uZEhleDhTdHJpbmcgPSBoZXg4U3RyaW5nO1xuICAgIHZhciBncmFkaWVudFR5cGUgPSBjb2xvci5ncmFkaWVudFR5cGUgPyAnR3JhZGllbnRUeXBlID0gMSwgJyA6ICcnO1xuICAgIGlmIChzZWNvbmRDb2xvcikge1xuICAgICAgICB2YXIgcyA9IG5ldyBpbmRleF9qc18xLlRpbnlDb2xvcihzZWNvbmRDb2xvcik7XG4gICAgICAgIHNlY29uZEhleDhTdHJpbmcgPSAnIycgKyAoMCwgY29udmVyc2lvbl9qc18xLnJnYmFUb0FyZ2JIZXgpKHMuciwgcy5nLCBzLmIsIHMuYSk7XG4gICAgfVxuICAgIHJldHVybiBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChcIi5jb25jYXQoZ3JhZGllbnRUeXBlLCBcInN0YXJ0Q29sb3JzdHI9XCIpLmNvbmNhdChoZXg4U3RyaW5nLCBcIixlbmRDb2xvcnN0cj1cIikuY29uY2F0KHNlY29uZEhleDhTdHJpbmcsIFwiKVwiKTtcbn1cbmV4cG9ydHMudG9Nc0ZpbHRlciA9IHRvTXNGaWx0ZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0b01zRmlsdGVyIiwiY29udmVyc2lvbl9qc18xIiwicmVxdWlyZSIsImluZGV4X2pzXzEiLCJmaXJzdENvbG9yIiwic2Vjb25kQ29sb3IiLCJjb2xvciIsIlRpbnlDb2xvciIsImhleDhTdHJpbmciLCJyZ2JhVG9BcmdiSGV4IiwiciIsImciLCJiIiwiYSIsInNlY29uZEhleDhTdHJpbmciLCJncmFkaWVudFR5cGUiLCJzIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/to-ms-filter.js\n");

/***/ }),

/***/ "./node_modules/@ctrl/tinycolor/dist/util.js":
/*!***************************************************!*\
  !*** ./node_modules/@ctrl/tinycolor/dist/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pad2 = exports.convertToPercentage = exports.boundAlpha = exports.isPercentage = exports.isOnePointZero = exports.clamp01 = exports.bound01 = void 0;\n/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */ function bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = \"100%\";\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));\n    } else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = n % max / parseFloat(String(max));\n    }\n    return n;\n}\nexports.bound01 = bound01;\n/**\n * Force a number between 0 and 1\n * @hidden\n */ function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\nexports.clamp01 = clamp01;\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */ function isOnePointZero(n) {\n    return typeof n === \"string\" && n.indexOf(\".\") !== -1 && parseFloat(n) === 1;\n}\nexports.isOnePointZero = isOnePointZero;\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */ function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") !== -1;\n}\nexports.isPercentage = isPercentage;\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */ function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\nexports.boundAlpha = boundAlpha;\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */ function convertToPercentage(n) {\n    if (n <= 1) {\n        return \"\".concat(Number(n) * 100, \"%\");\n    }\n    return n;\n}\nexports.convertToPercentage = convertToPercentage;\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */ function pad2(c) {\n    return c.length === 1 ? \"0\" + c : String(c);\n}\nexports.pad2 = pad2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsWUFBWSxHQUFHQSwyQkFBMkIsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHQSxzQkFBc0IsR0FBR0EsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUMzSjs7O0NBR0MsR0FDRCxTQUFTUSxRQUFRQyxDQUFDLEVBQUVDLEdBQUc7SUFDbkIsSUFBSUosZUFBZUcsSUFBSTtRQUNuQkEsSUFBSTtJQUNSO0lBQ0EsSUFBSUUsWUFBWU4sYUFBYUk7SUFDN0JBLElBQUlDLFFBQVEsTUFBTUQsSUFBSUcsS0FBS0MsR0FBRyxDQUFDSCxLQUFLRSxLQUFLRixHQUFHLENBQUMsR0FBR0ksV0FBV0w7SUFDM0QsK0NBQStDO0lBQy9DLElBQUlFLFdBQVc7UUFDWEYsSUFBSU0sU0FBU0MsT0FBT1AsSUFBSUMsTUFBTSxNQUFNO0lBQ3hDO0lBQ0Esd0NBQXdDO0lBQ3hDLElBQUlFLEtBQUtLLEdBQUcsQ0FBQ1IsSUFBSUMsT0FBTyxVQUFVO1FBQzlCLE9BQU87SUFDWDtJQUNBLGdEQUFnRDtJQUNoRCxJQUFJQSxRQUFRLEtBQUs7UUFDYixrQ0FBa0M7UUFDbEMsc0RBQXNEO1FBQ3RELDRCQUE0QjtRQUM1QkQsSUFBSSxDQUFDQSxJQUFJLElBQUksSUFBS0MsTUFBT0EsTUFBTUQsSUFBSUMsR0FBRSxJQUFLSSxXQUFXRSxPQUFPTjtJQUNoRSxPQUNLO1FBQ0Qsa0NBQWtDO1FBQ2xDLGlEQUFpRDtRQUNqREQsSUFBSSxJQUFLQyxNQUFPSSxXQUFXRSxPQUFPTjtJQUN0QztJQUNBLE9BQU9EO0FBQ1g7QUFDQVQsZUFBZSxHQUFHUTtBQUNsQjs7O0NBR0MsR0FDRCxTQUFTRCxRQUFRVyxHQUFHO0lBQ2hCLE9BQU9OLEtBQUtDLEdBQUcsQ0FBQyxHQUFHRCxLQUFLRixHQUFHLENBQUMsR0FBR1E7QUFDbkM7QUFDQWxCLGVBQWUsR0FBR087QUFDbEI7Ozs7Q0FJQyxHQUNELFNBQVNELGVBQWVHLENBQUM7SUFDckIsT0FBTyxPQUFPQSxNQUFNLFlBQVlBLEVBQUVVLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBS0wsV0FBV0wsT0FBTztBQUMvRTtBQUNBVCxzQkFBc0IsR0FBR007QUFDekI7OztDQUdDLEdBQ0QsU0FBU0QsYUFBYUksQ0FBQztJQUNuQixPQUFPLE9BQU9BLE1BQU0sWUFBWUEsRUFBRVUsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUN4RDtBQUNBbkIsb0JBQW9CLEdBQUdLO0FBQ3ZCOzs7Q0FHQyxHQUNELFNBQVNELFdBQVdnQixDQUFDO0lBQ2pCQSxJQUFJTixXQUFXTTtJQUNmLElBQUlDLE1BQU1ELE1BQU1BLElBQUksS0FBS0EsSUFBSSxHQUFHO1FBQzVCQSxJQUFJO0lBQ1I7SUFDQSxPQUFPQTtBQUNYO0FBQ0FwQixrQkFBa0IsR0FBR0k7QUFDckI7OztDQUdDLEdBQ0QsU0FBU0Qsb0JBQW9CTSxDQUFDO0lBQzFCLElBQUlBLEtBQUssR0FBRztRQUNSLE9BQU8sR0FBR2EsTUFBTSxDQUFDQyxPQUFPZCxLQUFLLEtBQUs7SUFDdEM7SUFDQSxPQUFPQTtBQUNYO0FBQ0FULDJCQUEyQixHQUFHRztBQUM5Qjs7O0NBR0MsR0FDRCxTQUFTRCxLQUFLc0IsQ0FBQztJQUNYLE9BQU9BLEVBQUVDLE1BQU0sS0FBSyxJQUFJLE1BQU1ELElBQUlSLE9BQU9RO0FBQzdDO0FBQ0F4QixZQUFZLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmRpbWJvbmktZm4vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvdXRpbC5qcz81NzdmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYWQyID0gZXhwb3J0cy5jb252ZXJ0VG9QZXJjZW50YWdlID0gZXhwb3J0cy5ib3VuZEFscGhhID0gZXhwb3J0cy5pc1BlcmNlbnRhZ2UgPSBleHBvcnRzLmlzT25lUG9pbnRaZXJvID0gZXhwb3J0cy5jbGFtcDAxID0gZXhwb3J0cy5ib3VuZDAxID0gdm9pZCAwO1xuLyoqXG4gKiBUYWtlIGlucHV0IGZyb20gWzAsIG5dIGFuZCByZXR1cm4gaXQgYXMgWzAsIDFdXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGJvdW5kMDEobiwgbWF4KSB7XG4gICAgaWYgKGlzT25lUG9pbnRaZXJvKG4pKSB7XG4gICAgICAgIG4gPSAnMTAwJSc7XG4gICAgfVxuICAgIHZhciBpc1BlcmNlbnQgPSBpc1BlcmNlbnRhZ2Uobik7XG4gICAgbiA9IG1heCA9PT0gMzYwID8gbiA6IE1hdGgubWluKG1heCwgTWF0aC5tYXgoMCwgcGFyc2VGbG9hdChuKSkpO1xuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBwZXJjZW50YWdlIGludG8gbnVtYmVyXG4gICAgaWYgKGlzUGVyY2VudCkge1xuICAgICAgICBuID0gcGFyc2VJbnQoU3RyaW5nKG4gKiBtYXgpLCAxMCkgLyAxMDA7XG4gICAgfVxuICAgIC8vIEhhbmRsZSBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnNcbiAgICBpZiAoTWF0aC5hYnMobiAtIG1heCkgPCAwLjAwMDAwMSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5XG4gICAgaWYgKG1heCA9PT0gMzYwKSB7XG4gICAgICAgIC8vIElmIG4gaXMgYSBodWUgZ2l2ZW4gaW4gZGVncmVlcyxcbiAgICAgICAgLy8gd3JhcCBhcm91bmQgb3V0LW9mLXJhbmdlIHZhbHVlcyBpbnRvIFswLCAzNjBdIHJhbmdlXG4gICAgICAgIC8vIHRoZW4gY29udmVydCBpbnRvIFswLCAxXS5cbiAgICAgICAgbiA9IChuIDwgMCA/IChuICUgbWF4KSArIG1heCA6IG4gJSBtYXgpIC8gcGFyc2VGbG9hdChTdHJpbmcobWF4KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiBuIG5vdCBhIGh1ZSBnaXZlbiBpbiBkZWdyZWVzXG4gICAgICAgIC8vIENvbnZlcnQgaW50byBbMCwgMV0gcmFuZ2UgaWYgaXQgaXNuJ3QgYWxyZWFkeS5cbiAgICAgICAgbiA9IChuICUgbWF4KSAvIHBhcnNlRmxvYXQoU3RyaW5nKG1heCkpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbmV4cG9ydHMuYm91bmQwMSA9IGJvdW5kMDE7XG4vKipcbiAqIEZvcmNlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBjbGFtcDAxKHZhbCkge1xuICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCB2YWwpKTtcbn1cbmV4cG9ydHMuY2xhbXAwMSA9IGNsYW1wMDE7XG4vKipcbiAqIE5lZWQgdG8gaGFuZGxlIDEuMCBhcyAxMDAlLCBzaW5jZSBvbmNlIGl0IGlzIGEgbnVtYmVyLCB0aGVyZSBpcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gaXQgYW5kIDFcbiAqIDxodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc0MjIwNzIvamF2YXNjcmlwdC1ob3ctdG8tZGV0ZWN0LW51bWJlci1hcy1hLWRlY2ltYWwtaW5jbHVkaW5nLTEtMD5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gaXNPbmVQb2ludFplcm8obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmRleE9mKCcuJykgIT09IC0xICYmIHBhcnNlRmxvYXQobikgPT09IDE7XG59XG5leHBvcnRzLmlzT25lUG9pbnRaZXJvID0gaXNPbmVQb2ludFplcm87XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBzdHJpbmcgcGFzc2VkIGluIGlzIGEgcGVyY2VudGFnZVxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmRleE9mKCclJykgIT09IC0xO1xufVxuZXhwb3J0cy5pc1BlcmNlbnRhZ2UgPSBpc1BlcmNlbnRhZ2U7XG4vKipcbiAqIFJldHVybiBhIHZhbGlkIGFscGhhIHZhbHVlIFswLDFdIHdpdGggYWxsIGludmFsaWQgdmFsdWVzIGJlaW5nIHNldCB0byAxXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGJvdW5kQWxwaGEoYSkge1xuICAgIGEgPSBwYXJzZUZsb2F0KGEpO1xuICAgIGlmIChpc05hTihhKSB8fCBhIDwgMCB8fCBhID4gMSkge1xuICAgICAgICBhID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59XG5leHBvcnRzLmJvdW5kQWxwaGEgPSBib3VuZEFscGhhO1xuLyoqXG4gKiBSZXBsYWNlIGEgZGVjaW1hbCB3aXRoIGl0J3MgcGVyY2VudGFnZSB2YWx1ZVxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBjb252ZXJ0VG9QZXJjZW50YWdlKG4pIHtcbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChOdW1iZXIobikgKiAxMDAsIFwiJVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5leHBvcnRzLmNvbnZlcnRUb1BlcmNlbnRhZ2UgPSBjb252ZXJ0VG9QZXJjZW50YWdlO1xuLyoqXG4gKiBGb3JjZSBhIGhleCB2YWx1ZSB0byBoYXZlIDIgY2hhcmFjdGVyc1xuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBwYWQyKGMpIHtcbiAgICByZXR1cm4gYy5sZW5ndGggPT09IDEgPyAnMCcgKyBjIDogU3RyaW5nKGMpO1xufVxuZXhwb3J0cy5wYWQyID0gcGFkMjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhZDIiLCJjb252ZXJ0VG9QZXJjZW50YWdlIiwiYm91bmRBbHBoYSIsImlzUGVyY2VudGFnZSIsImlzT25lUG9pbnRaZXJvIiwiY2xhbXAwMSIsImJvdW5kMDEiLCJuIiwibWF4IiwiaXNQZXJjZW50IiwiTWF0aCIsIm1pbiIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIlN0cmluZyIsImFicyIsInZhbCIsImluZGV4T2YiLCJhIiwiaXNOYU4iLCJjb25jYXQiLCJOdW1iZXIiLCJjIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ctrl/tinycolor/dist/util.js\n");

/***/ })

};
;